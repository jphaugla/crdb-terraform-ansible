- name: Debug OS information
  ansible.builtin.debug:
    msg: "The operating system is {{ ansible_facts['distribution'] }} {{ ansible_facts['distribution_version'] }}"

# --------------------------
#  Install Java 17
# --------------------------
- name: Install Java 17 on Debian/Ubuntu
  become: yes
  apt:
    name:
      - openjdk-17-jdk
    state: latest
    update_cache: yes
  when: ansible_facts.pkg_mgr == 'apt'

- name: Install Java 17 on RHEL/CentOS
  become: yes
  yum:
    name:
      - java-17-openjdk
      - java-17-openjdk-devel
    state: latest
  when: ansible_facts.pkg_mgr in ['yum','dnf'] and not (ansible_facts['distribution'] == 'Amazon')

- name: Install Amazon Corretto 17 (Amazon Linux)
  become: yes
  yum:
    name:
      - java-17-amazon-corretto
      - java-17-amazon-corretto-devel
    state: latest
  when: ansible_facts['distribution'] == 'Amazon'

# --------------------------
#  Install Go
# --------------------------
- name: Install Go on Debian/Ubuntu
  become: yes
  apt:
    name: golang-go
    state: latest
    update_cache: yes
  when: ansible_facts.pkg_mgr == 'apt'

- name: Install Go on Amazon Linux / RHEL
  become: yes
  package:
    name: golang
    state: latest
  when: ansible_facts.pkg_mgr in ['yum','dnf']

# --------------------------
#  Install Maven
# --------------------------
- name: Install Maven via package on Debian/Ubuntu
  become: yes
  apt:
    name: maven
    state: latest
    update_cache: yes
  when: ansible_facts.pkg_mgr == 'apt'

- name: Install wget & tar prerequisites on RHEL/Amazon
  become: yes
  yum:
    name:
      - wget
      - tar
    state: latest
  when: ansible_facts.pkg_mgr in ['yum','dnf']

- name: Download & unpack Maven on RHEL/Amazon
  become: yes
  unarchive:
    src: "https://dlcdn.apache.org/maven/maven-3/{{ maven_version }}/binaries/apache-maven-{{ maven_version }}-bin.tar.gz"
    dest: /opt
    remote_src: yes
  when: ansible_facts.pkg_mgr in ['yum','dnf']

- name: Symlink Maven directory on RHEL/Amazon
  become: yes
  file:
    src: "/opt/apache-maven-{{ maven_version }}"
    dest: "/opt/maven"
    state: link
  when: ansible_facts.pkg_mgr in ['yum','dnf']

# --------------------------
#  Environment setup
# --------------------------
- name: Create binaries dir
  file:
    path: "/home/{{ login_username }}/binaries"
    owner: "{{ login_username }}"
    group: "{{ login_username }}"
    mode: '0755'
    state: directory

- name: Configure JAVA_HOME
  become: yes
  copy:
    dest: /etc/profile.d/jdk17.sh
    mode: '0755'
    content: |
      {% if ansible_facts.pkg_mgr == 'apt' %}
      export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
      {% elif ansible_facts['distribution'] == 'Amazon' %}
      export JAVA_HOME=/usr/lib/jvm/java-17-amazon-corretto
      {% else %}
      export JAVA_HOME=/usr/lib/jvm/java-17-openjdk
      {% endif %}
      export PATH=$JAVA_HOME/bin:$PATH

- name: Configure MAVEN_HOME
  become: yes
  copy:
    dest: /etc/profile.d/maven.sh
    mode: '0755'
    content: |
      export M2_HOME=/opt/maven
      export MAVEN_HOME=/opt/maven
      export PATH=$PATH:$M2_HOME/bin
