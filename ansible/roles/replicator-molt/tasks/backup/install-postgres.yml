---
# roles/replicator-molt/tasks/install-postgres.yml

- name: Debug OS information
  ansible.builtin.debug:
    msg: "OS={{ ansible_facts['distribution'] }} {{ ansible_facts['distribution_version'] }} pkg_mgr={{ ansible_facts['pkg_mgr'] }}"

- name: Set pkg_mgr fact
  set_fact:
    pkg_mgr: "{{ ansible_facts['pkg_mgr'] }}"

- name: Set variable if Amazon Linux
  set_fact:
    is_amazon_linux: "{{ ansible_facts['distribution'] == 'Amazon' }}"
# --------------------------
# Enable PostgreSQL repo (Amazon Linux)
# --------------------------

- name: Install postgresql-server (Amazon)
  become: yes
  dnf:
    name: postgresql15-server
    state: present
  when: is_amazon_linux | bool

- name: Initialize PostgreSQL database (Amazon)
  become: yes
  shell:
    cmd: /bin/postgresql-setup initdb
    creates: /var/lib/pgsql/data/postgresql.conf
  when: is_amazon_linux | bool

- name: Copy pg_hba.conf (Amazon)
  become: yes
  copy:
    src: pg_hba.conf
    dest: /var/lib/pgsql/data/pg_hba.conf
    owner: postgres
    group: postgres
    mode: '0600'
  when: is_amazon_linux | bool

- name: Configure PostgreSQL replication settings
  become: yes
  blockinfile:
    path: >-
      {{ 
        is_amazon_linux | bool 
          and '/var/lib/pgsql/data/postgresql.conf'
          or '/var/lib/pgsql/15/data/postgresql.conf'
      }}
    marker: "# {mark} ANSIBLE MANAGED POSTGRES REPLICATION CONFIG"
    block: |
      # Replication settings
      wal_level = logical
      max_wal_senders = 3
      max_replication_slots = 3
      wal_keep_size = 1024
      hot_standby = on
  when: is_amazon_linux | bool

- name: Start PostgreSQL (Amazon)
  become: yes
  systemd:
    name: postgresql
    state: started
    enabled: yes
  when: is_amazon_linux | bool

- name: Install psycopg2-binary (Amazon Linux 2023)
  become: yes
  pip:
    name: psycopg2-binary
    executable: pip3
  when: is_amazon_linux | bool



# --------------------------
# Enable PostgreSQL repo (RHEL/CentOS)
# --------------------------
# --------------------------
# Enable PostgreSQL repo & install server on RHEL/CentOS
# --------------------------
- name: Install PGDG RPM
  become: yes
  ansible.builtin.shell: |
    dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm
  register: pgdg_install
  retries: 3
  delay: 5
  until: pgdg_install.rc == 0
  when: pkg_mgr in ['yum','dnf']
  when: not is_amazon_linux | bool

- name: Refresh DNF cache
  become: yes
  ansible.builtin.dnf:
    update_cache: yes
  when: pkg_mgr in ['yum','dnf']
  when: not is_amazon_linux | bool

- name: Install postgresql-server
  become: yes
  ansible.builtin.dnf:
    name: postgresql15-server
    state: present
  when: pkg_mgr in ['yum','dnf']
  when: not is_amazon_linux | bool


# ----------------------------------------
# Debian/Ubuntu: untouched from your current working playbook
# ----------------------------------------
- name: Install postgresql-server (Debian/Ubuntu)
  become: yes
  ansible.builtin.apt:
    name: postgresql
    state: present
    update_cache: yes
  when: pkg_mgr == 'apt'

- name: Find installed PostgreSQL cluster version (Debian/Ubuntu)
  become: yes
  ansible.builtin.command:
    cmd: ls /etc/postgresql
  register: pg_versions
  changed_when: false
  when: pkg_mgr == 'apt'

- name: Set pg_version fact for Debian/Ubuntu
  become: yes
  set_fact:
    pg_version: "{{ pg_versions.stdout_lines[0] }}"
  when: pkg_mgr == 'apt'

- name: Initialize PostgreSQL database (Debian/Ubuntu)
  become: yes
  ansible.builtin.command:
    cmd: pg_createcluster {{ pg_version }} main --start
  args:
    creates: "/etc/postgresql/{{ pg_version }}/main/postgresql.conf"
  when: pkg_mgr == 'apt'

- name: Copy pg_hba.conf (Debian/Ubuntu)
  become: yes
  ansible.builtin.copy:
    src: pg_hba.conf
    dest: /etc/postgresql/{{ pg_version }}/main/pg_hba.conf
    owner: postgres
    group: postgres
    mode: '0600'
  when: pkg_mgr == 'apt'

- name: Start & enable PostgreSQL (Debian/Ubuntu)
  become: yes
  ansible.builtin.systemd:
    name: postgresql
    enabled: yes
    state: started
  when: pkg_mgr == 'apt'

- name: Install python3-psycopg2 (Debian/Ubuntu)
  become: yes
  ansible.builtin.apt:
    name: python3-psycopg2
    state: present
    update_cache: yes
  when: pkg_mgr == 'apt'

# ----------------------------------------
# Common: replication settings + superuser password
# ----------------------------------------
- name: Configure PostgreSQL replication settings
  become: yes
  ansible.builtin.blockinfile:
    path: >-
      {{ pkg_mgr in ['yum','dnf']
         and '/var/lib/pgsql/15/data/postgresql.conf'
         or '/etc/postgresql/' + pg_version + '/main/postgresql.conf' }}
    marker: "# {mark} ANSIBLE MANAGED POSTGRES REPLICATION CONFIG"
    block: |
      wal_level = logical
      max_wal_senders = 3
      max_replication_slots = 3
      wal_keep_size = 1024
      hot_standby = on

- name: Set PostgreSQL superuser password
  become: yes
  ansible.builtin.shell: |
    sudo -u postgres psql -v ON_ERROR_STOP=1 \
      --command="ALTER USER postgres WITH PASSWORD '{{ db_admin_password }}';"
  args:
    executable: /bin/bash
